---
const {
  title = "Boris Quijano — Hero Wall",
  description = "Digital Strategist & Narrative Architect."
} = Astro.props;

import '../styles/global.css';
const SITE = "https://hero-wall-mvp.vercel.app";
const OG_IMG = `${SITE}/og/hero-wall-og.png`;
---
<!doctype html>
<html lang="en">
  <head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

<!-- Iconify: core runtime (for <span class="iconify" ...>) -->
<script defer src="https://code.iconify.design/3/3.1.1/iconify.min.js"></script>

<!-- Iconify: web component (for <iconify-icon ...>) -->
<script defer src="https://code.iconify.design/iconify-icon/1.0.8/iconify-icon.min.js"></script>
 
  <title>{title}</title>
  <meta name="description" content={description} />
  <link rel="canonical" href={SITE} />

  <!-- Social -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={SITE} />
  <meta property="og:title" content="Your Digital Hero for AI‑Powered Web Systems" />
  <meta property="og:description" content="Sites that save your time and print results." />
  <meta property="og:image" content={OG_IMG} />
  <meta name="twitter:card" content="summary_large_image" />

  <!-- JSON‑LD (proper Astro injection) -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Person",
      name: "Boris Quijano",
      url: SITE,
      jobTitle: "Digital Strategist & Narrative Architect",
      sameAs: ["https://github.com/BlizzardGhost"]
    })}
  </script>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Press+Start+2P&display=swap" rel="stylesheet">

  <!-- Favicon -->
  <link
    rel="icon"
    href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 64 64%22><rect width=%2264%22 height=%2264%22 fill=%22%231C3B54%22/><path d=%22M32 8l8 10h-16zM24 40h6v10h-6zM34 40h6v10h-6z%22 fill=%22%23FFD166%22/></svg>"
  >

  <!-- Optional LCP helper -->
  <link rel="preload" href="/img/hero.png" as="image">
</head>
  <body>
    <!-- Parallax world -->
    <div class="parallax" aria-hidden="true">
      <div class="layer mountains"></div>
      <div class="layer clouds"></div>
    </div>

    <!-- Page content -->
    <slot />

    <!-- Pixel Modal -->
    <div id="modalOverlay" class="modal-overlay" aria-hidden="true">
      <div id="modal" class="modal" role="dialog" aria-modal="true" aria-labelledby="modalTitle">
        <div class="modal-header">
          <div id="modalTitle">Message</div>
        </div>
        <div id="modalBody" class="modal-body"></div>
        <div class="modal-actions">
          <button class="modal-close" id="modalOk" type="button">OK</button>
        </div>
      </div>
    </div>

    <!-- Scripts -->
    <script>
      // Parallax scroll variable (no header code, since header removed)
      function onScroll(){
        document.documentElement.style.setProperty('--scroll', String(window.scrollY || 0));
      }
      document.addEventListener('scroll', onScroll, { passive: true });
      onScroll();

      // ===== Pixel Modal with rotating jokes =====
      if (!window.__HeroWallWired__) {
        window.__HeroWallWired__ = true;

        const overlay = document.getElementById('modalOverlay');
        const modal   = document.getElementById('modal');
        const bodyEl  = document.getElementById('modalBody');
        const titleEl = document.getElementById('modalTitle');

        const JOKES = [
          "Corporate ladder tip: it’s just a treadmill with better PR.",
          "Now hiring: <em>Senior Meeting Attendee</em>. Must bring own coffee.",
          "KPIs reached: 120% compliance, 0% creativity. Perfect.",
          "Our culture is ‘like a family.’ Cool—who’s doing the dishes?",
          "Promotion path: do more of the same, but in a different room.",
          "Dress code: business casual. Ideas code: strictly casual.",
          "Stand‑up meeting: we stood, nothing stood out.",
          "New policy: innovate exactly as approved last quarter.",
          "FYI: The hamster from the wheel has requested PTO.",
          "Reminder: If it needs a 14‑slide pre‑read, it’s not a decision—it’s a ritual."
        ];
        let lastJokeIndex = -1;
        const nextJoke = () => {
          let i; do { i = Math.floor(Math.random() * JOKES.length); } while (i === lastJokeIndex && JOKES.length > 1);
          lastJokeIndex = i; return JOKES[i];
        };

        let lastFocus = null;

        function openModal({ title = "Message", html = "" } = {}){
          lastFocus = document.activeElement;
          titleEl.textContent = title;
          const joke = `<p class="subtitle" style="margin:12px 0 0">${nextJoke()}</p>`;
          bodyEl.innerHTML = html ? `${html}${joke}` : joke;

          overlay.classList.add('active');
          overlay.setAttribute('aria-hidden','false');
          document.body.classList.add('no-scroll');
          (modal.querySelector('.modal-close') || modal).focus();
        }
        function closeModal(){
          overlay.classList.remove('active');
          overlay.setAttribute('aria-hidden','true');
          document.body.classList.remove('no-scroll');
          lastFocus && lastFocus.focus?.();
        }
        modal.addEventListener('click', (e)=>{ e.stopPropagation(); if (e.target.closest('.modal-close')) closeModal(); }, true);
        document.addEventListener('keydown', (e)=>{ if (e.key === 'Escape') closeModal(); });

        // Easter egg
        document.addEventListener('keydown', (e) => {
          if (e.key.toLowerCase() === 'r') {
            openModal({
              title: "Siege Mode",
              html: "<p>Built by <strong>Raz</strong> &amp; <strong>Ms. Devil</strong>, Directed by <strong>Boris</strong>.</p>"
            });
          }
        });

        window.HeroWallModal = { open: openModal, close: closeModal };
      }

      // Global badge click handler
      document.addEventListener('click', (e) => {
        const btn = e.target.closest('button.badge');
        if (!btn) return;
        const title = btn.dataset.title || 'Badge';
        const caption = btn.dataset.caption || btn.dataset.html || '';
        window.HeroWallModal.open({ title, html: caption ? `<p>${caption}</p>` : "" });
      });

      // Scrolling belts (timeline & loadout) — unchanged
      (() => {
        function wireBelt({root, scrollerSel, leftSel, rightSel, stepPx=420}) {
          const scroller = root.querySelector(scrollerSel);
          const left  = root.querySelector(leftSel);
          const right = root.querySelector(rightSel);
          if (!scroller || !left || !right) return;

          const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
          const behavior = prefersReduced ? 'auto' : 'smooth';

          const STEP = () => Math.min(stepPx, Math.round(scroller.clientWidth * 0.6));
          const update = () => {
            const max = scroller.scrollWidth - scroller.clientWidth - 1;
            left.disabled  = scroller.scrollLeft <= 0;
            right.disabled = scroller.scrollLeft >= max;
          };
          const nudge = (dir) => { scroller.scrollBy({left: dir * STEP(), behavior}); requestAnimationFrame(update); };

          left.addEventListener('click', () => nudge(-1));
          right.addEventListener('click', () => nudge(1));
          scroller.addEventListener('scroll', update);

          root.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft')  { e.preventDefault(); nudge(-1); }
            if (e.key === 'ArrowRight') { e.preventDefault(); nudge(1);  }
          });

          [left,right].forEach(b => b.setAttribute('aria-live','polite'));
          update();
        }

        const timeline = document.querySelector('#timeline .timeline-wrap');
        if (timeline) wireBelt({ root: timeline, scrollerSel: '#timelineScroller', leftSel: '.tl-left', rightSel: '.tl-right' });

        const loadout = document.querySelector('.loadout-belt');
        if (loadout) wireBelt({ root: loadout, scrollerSel: '#loadoutBar', leftSel: '#loadoutPrev', rightSel: '#loadoutNext', stepPx: 360 });
      })();
    </script>
  </body>
</html>